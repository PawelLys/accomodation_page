{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Pawel\\\\Desktop\\\\programowanie\\\\projGit\\\\accomodationPage\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Pawel\\\\Desktop\\\\programowanie\\\\projGit\\\\accomodationPage\\\\src\\\\components\\\\ContactForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash'; //import { createNewAccount } from './actions';\n\nclass ContactForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isChecked: true,\n      newAccountSuccessful: false,\n      alreadyExist: false\n    };\n\n    this.renderError = meta => meta.touched && meta.error && !meta.active ? meta.error : null;\n\n    this.renderElement = formProps => {\n      const meta = formProps.meta;\n      if (formProps.input.name === 'email') return React.createElement(\"div\", {\n        className: \"login-form-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \"Your email:\", React.createElement(\"input\", Object.assign({\n        type: \"email\",\n        placeholder: this.renderError(meta),\n        className: meta.touched && meta.error && !meta.active ? 'red-background' : ''\n      }, formProps.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      })));else if (formProps.input.name === 'country') return React.createElement(\"div\", {\n        className: \"login-form-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Your country of residence:\", React.createElement(\"input\", Object.assign({\n        type: \"text\",\n        placeholder: this.renderError(meta),\n        className: meta.touched && meta.error && !meta.active ? 'red-background' : ''\n      }, formProps.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })));else if (formProps.input.name === 'phoneNumber') return React.createElement(\"div\", {\n        className: \"login-form-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Your country of residence:\", React.createElement(\"input\", Object.assign({\n        type: \"number\",\n        placeholder: this.renderError(meta),\n        className: meta.touched && meta.error && !meta.active ? 'red-background' : ''\n      }, formProps.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      })));else if (formProps.input.name === 'message') return React.createElement(\"div\", {\n        className: \"login-form-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Your message:\", React.createElement(\"input\", Object.assign({\n        type: \"text\",\n        placeholder: this.renderError(meta),\n        className: meta.touched && meta.error && !meta.active ? 'red-background' : ''\n      }, formProps.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })));else return React.createElement(\"div\", {\n        className: \"login-form-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, formProps.label, React.createElement(\"input\", Object.assign({\n        type: \"text\",\n        placeholder: this.renderError(meta),\n        className: meta.touched && meta.error && !meta.active ? 'red-background' : ''\n      }, formProps.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })));\n    };\n\n    this.onSubmitBtn = formValues => {\n      console.log(_objectSpread({}, formValues)); //this.props.createNewAccount({...formValues, id});\n      //this.setState({ newAccountSuccessful: true });\n    };\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      className: \"login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmitBtn),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"firstName\",\n      component: this.renderElement,\n      label: \"Your first name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"lastName\",\n      component: this.renderElement,\n      label: \"Your last name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"login-form-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Your gender:\", React.createElement(\"div\", {\n      className: \"login-form-item-gender\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"gender\",\n      component: \"input\",\n      type: \"radio\",\n      value: \"male\",\n      checked: this.state.isChecked,\n      onClick: () => this.setState({\n        isChecked: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), \"Male\", React.createElement(Field, {\n      name: \"gender\",\n      component: \"input\",\n      type: \"radio\",\n      value: \"female\",\n      checked: !this.state.isChecked,\n      onClick: () => this.setState({\n        isChecked: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), \"Female\")), React.createElement(Field, {\n      name: \"email\",\n      component: this.renderElement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"country\",\n      component: this.renderElement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"phoneNumber\",\n      component: this.renderElement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"message\",\n      component: this.renderElement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"login-form-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Create\")));\n  }\n\n}\n\n;\n\nconst validate = formValues => {\n  const error = {};\n  if (!formValues.firstName) error.firstName = 'Please, input your first name!';\n  if (!formValues.lastName) error.lastName = 'Please, input your last name!';\n  if (!formValues.email) error.email = 'Please, input your email!';\n  if (!formValues.country) error.country = 'Please, input your country of residence!';\n  if (!formValues.phoneNumber) error.phoneNumber = 'Please, input your phone number!';\n  if (!formValues.message) error.message = 'Please, input your password!';\n  return error;\n};\n/*const mapStateToProps = state => {\r\n    return { userAcc: state.localAccount, userSignStatus: state.signedStatus.userSignStatus };\r\n};*/\n\n\nconst formWrapped = reduxForm({\n  form: 'ContactUs',\n  validate\n})(ContactForm);\nexport default connect(null\n/*mapStateToProps, { createNewAccount }*/\n)(formWrapped);","map":{"version":3,"sources":["C:\\Users\\Pawel\\Desktop\\programowanie\\projGit\\accomodationPage\\src\\components\\ContactForm.js"],"names":["React","Field","reduxForm","connect","isEmpty","ContactForm","Component","state","isChecked","newAccountSuccessful","alreadyExist","renderError","meta","touched","error","active","renderElement","formProps","input","name","label","onSubmitBtn","formValues","console","log","render","props","handleSubmit","setState","validate","firstName","lastName","email","country","phoneNumber","message","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport { isEmpty } from 'lodash';\r\n//import { createNewAccount } from './actions';\r\n\r\nclass ContactForm extends React.Component {\r\n    state = { isChecked: true, newAccountSuccessful: false, alreadyExist: false };\r\n\r\n    renderError = meta => meta.touched && meta.error && !meta.active ? meta.error : null;\r\n\r\n    renderElement = formProps => {\r\n        const { meta } = formProps;\r\n        if (formProps.input.name === 'email')\r\n            return (\r\n                <div className=\"login-form-item\">\r\n                    Your email:<input type=\"email\" placeholder={this.renderError(meta)} \r\n                    className={meta.touched && meta.error && !meta.active ? 'red-background' : ''}  \r\n                    {...formProps.input} />\r\n                </div>\r\n            );\r\n        else if(formProps.input.name === 'country') \r\n            return (\r\n                <div className=\"login-form-item\">\r\n                    Your country of residence:<input type=\"text\" placeholder={this.renderError(meta)} \r\n                    className={meta.touched && meta.error && !meta.active ? 'red-background' : ''}  \r\n                    {...formProps.input} />\r\n                </div>\r\n            );\r\n        else if(formProps.input.name === 'phoneNumber') \r\n            return (\r\n                <div className=\"login-form-item\">\r\n                    Your country of residence:<input type=\"number\" placeholder={this.renderError(meta)} \r\n                    className={meta.touched && meta.error && !meta.active ? 'red-background' : ''}  \r\n                    {...formProps.input} />\r\n                </div>\r\n            );\r\n        else if(formProps.input.name === 'message') \r\n            return (\r\n                <div className=\"login-form-item\">\r\n                    Your message:<input type=\"text\" placeholder={this.renderError(meta)} \r\n                    className={meta.touched && meta.error && !meta.active ? 'red-background' : ''}  \r\n                    {...formProps.input} />\r\n                </div>\r\n            );\r\n        else \r\n            return (\r\n                <div className=\"login-form-item\">\r\n                    {formProps.label}<input type=\"text\" placeholder={this.renderError(meta)}\r\n                    className={meta.touched && meta.error && !meta.active ? 'red-background' : ''}\r\n                    {...formProps.input} />\r\n                </div>\r\n            );\r\n    };\r\n\r\n    onSubmitBtn = formValues => {\r\n        console.log({...formValues,});\r\n        //this.props.createNewAccount({...formValues, id});\r\n        //this.setState({ newAccountSuccessful: true });\r\n    };\r\n    \r\n    render() {\r\n        return(\r\n            <section className=\"login\">\r\n                <form onSubmit={this.props.handleSubmit(this.onSubmitBtn)}>\r\n                    <Field name=\"firstName\" component={this.renderElement} label=\"Your first name:\" />\r\n                    <Field name=\"lastName\" component={this.renderElement} label=\"Your last name:\" />\r\n                    <div className=\"login-form-item\">Your gender: \r\n                        <div className=\"login-form-item-gender\">\r\n                            <Field name=\"gender\" component=\"input\" type=\"radio\" value=\"male\" \r\n                            checked={this.state.isChecked}  onClick={() => this.setState({ isChecked: true })} />Male\r\n                            <Field name=\"gender\" component=\"input\" type=\"radio\" value=\"female\" \r\n                            checked={!this.state.isChecked} onClick={() => this.setState({ isChecked: false })} />Female\r\n                        </div>\r\n                    </div>\r\n                    <Field name=\"email\" component={this.renderElement} />\r\n                    <Field name=\"country\" component={this.renderElement} />\r\n                    <Field name=\"phoneNumber\" component={this.renderElement} />\r\n                    <Field name=\"message\" component={this.renderElement} />\r\n                    <button className=\"login-form-btn\">Create</button>\r\n                </form>\r\n            </section>\r\n        );\r\n    };\r\n};\r\n\r\nconst validate = formValues => {\r\n    const error = {};\r\n\r\n    if(!formValues.firstName) error.firstName = 'Please, input your first name!';\r\n    if(!formValues.lastName) error.lastName = 'Please, input your last name!';\r\n    if(!formValues.email) error.email = 'Please, input your email!';\r\n    if(!formValues.country) error.country = 'Please, input your country of residence!';\r\n    if(!formValues.phoneNumber) error.phoneNumber = 'Please, input your phone number!';\r\n    if(!formValues.message) error.message = 'Please, input your password!';\r\n\r\n    return error;\r\n}\r\n\r\n/*const mapStateToProps = state => {\r\n    return { userAcc: state.localAccount, userSignStatus: state.signedStatus.userSignStatus };\r\n};*/\r\n\r\nconst formWrapped = reduxForm({\r\n    form: 'ContactUs', validate\r\n})(ContactForm);\r\n\r\nexport default connect(null/*mapStateToProps, { createNewAccount }*/)(formWrapped);"]},"metadata":{},"sourceType":"module"}