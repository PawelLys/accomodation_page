{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pawel\\\\Desktop\\\\programowanie\\\\projGit\\\\accomodationPage\\\\src\\\\components\\\\NavBar.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { hoverNav } from './actions';\n\nclass NavBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      headerHover: false,\n      visible: true\n    };\n\n    this.handleScroll = () => {\n      console.log(window.pageYOffset);\n      const currentScrollPos = window.pageYOffset;\n      const visible = this.state.prevScrollpos > currentScrollPos;\n      this.setState({\n        visible: 0 > window.pageYOffset\n      });\n    };\n\n    this.changeHeaderHover = () => {\n      this.setState({\n        headerHover: !this.state.headerHover\n      });\n      if (this.state.headerHover) this.props.hoverNav(false);\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  } // Remove the event listener when the component is unmount.\n\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  } // Hide or show the menu.\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"header\".concat(this.state.visible ? '' : '-hidden'),\n      onMouseEnter: this.changeHeaderHover,\n      onMouseLeave: this.changeHeaderHover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"iconify\",\n      \"data-icon\": \"whh:doghouse\",\n      \"data-inline\": \"false\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"header-links\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      onMouseEnter: () => this.props.hoverNav(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Location\"), React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Offer\"), React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Contact\"), React.createElement(\"div\", {\n      className: \"header-links_details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"ion-icon\", {\n      name: \"cart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"ion-icon\", {\n      name: \"person\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: this.props.hover ? \"header-selected\" : \"header-hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header-selected_title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Location\")));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    hover: state.headerState\n  };\n};\n\nexport default connect(mapStateToProps, {\n  hoverNav\n})(NavBar);","map":{"version":3,"sources":["C:\\Users\\Pawel\\Desktop\\programowanie\\projGit\\accomodationPage\\src\\components\\NavBar.js"],"names":["React","connect","Link","hoverNav","NavBar","Component","state","headerHover","visible","handleScroll","console","log","window","pageYOffset","currentScrollPos","prevScrollpos","setState","changeHeaderHover","props","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","hover","mapStateToProps","headerState"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { hoverNav } from './actions';\r\n\r\nclass NavBar extends React.Component {\r\n    state = { headerHover: false, visible: true };\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n      }\r\n    \r\n      // Remove the event listener when the component is unmount.\r\n      componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.handleScroll);\r\n      }\r\n    \r\n      // Hide or show the menu.\r\n      handleScroll = () => {    \r\n          console.log(window.pageYOffset);\r\n        const currentScrollPos = window.pageYOffset;\r\n        const visible = this.state.prevScrollpos > currentScrollPos;\r\n    \r\n        this.setState({ visible: 0 > window.pageYOffset });\r\n      };\r\n\r\n    changeHeaderHover = () => {\r\n        this.setState({ headerHover: !this.state.headerHover });\r\n        if(this.state.headerHover) this.props.hoverNav(false);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n                <div className={`header${this.state.visible ? '' : '-hidden'}`} \r\n                onMouseEnter={this.changeHeaderHover} \r\n                onMouseLeave={this.changeHeaderHover}>\r\n                    <span className=\"iconify\" data-icon=\"whh:doghouse\" data-inline=\"false\"></span>\r\n                    <div className=\"header-links\">\r\n                        <Link to=\"/\" onMouseEnter={() => this.props.hoverNav(true)}>Location</Link>\r\n                        <Link to=\"/\">Offer</Link>\r\n                        <Link to=\"/\">Contact</Link>\r\n                        <div className=\"header-links_details\">\r\n                            <Link to=\"/\"><ion-icon name=\"cart\"></ion-icon></Link>\r\n                            <Link to=\"/\"><ion-icon name=\"person\"></ion-icon></Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className={this.props.hover ? \"header-selected\" : \"header-hidden\"}>\r\n                        <div className=\"header-selected_title\">\r\n                            Location\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return { hover: state.headerState };\r\n}\r\n\r\nexport default connect(mapStateToProps, { hoverNav })(NavBar);"]},"metadata":{},"sourceType":"module"}